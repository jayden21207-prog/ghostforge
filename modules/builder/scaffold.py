from pathlib import Path
import json, textwrap

AGENT_README = """# {name} ({kind} agent)

Generated by GhostForge. Offline by default.
"""

AGENT_MANIFEST = """name: {name}
kind: {kind}
version: "0.1.0"
capabilities:
  - plan
  - run
defaults:
  prompt_style: concise
"""

AGENT_CODE = r'''from pathlib import Path
import json, sys

class Agent:
    def __init__(self, name="{name}", kind="{kind}"):
        self.name = name
        self.kind = kind

    def plan(self, goal: str):
        base = [
            f"[{self.kind}] analyze goal: {goal}",
            "collect local data (stub; offline)",
            "generate structured summary",
        ]
        if self.kind == "game":
            base.insert(1, "enumerate mechanics, loops, and difficulty curve")
        elif self.kind == "tv":
            base.insert(1, "enumerate characters, arcs, episodes, motifs")
        return base

    def run(self, goal: str):
        steps = self.plan(goal)
        return {{
            "agent": self.name,
            "kind": self.kind,
            "goal": goal,
            "steps": steps,
            "result": f"[demo] {self.kind} agent processed goal"
        }}

if __name__ == "__main__":
    goal = " ".join(sys.argv[1:]) or "demo goal"
    print(json.dumps(Agent().run(goal), indent=2))
'''

TEST_CODE = """def run():
    import pathlib, subprocess, sys, json
    root = pathlib.Path(__file__).resolve().parents[1]
    agent = root / "agents" / "{name}" / "agent.py"
    if not agent.exists():
        return False
    out = subprocess.check_output([sys.executable, str(agent), "smoke test"]).decode("utf-8", "ignore")
    return '"result"' in out and '"steps"' in out
"""

def create_agent(root: Path, name: str, kind: str="generic"):
    agents_dir = root / "agents" / name
    agents_dir.mkdir(parents=True, exist_ok=True)

    # files
    (agents_dir / "README.md").write_text(AGENT_README.format(name=name, kind=kind), encoding="utf-8")
    (agents_dir / "manifest.yaml").write_text(AGENT_MANIFEST.format(name=name, kind=kind), encoding="utf-8")
    (agents_dir / "agent.py").write_text(AGENT_CODE.format(name=name, kind=kind), encoding="utf-8")

    # per-agent golden test
    tests = root / "tests"
    tests.mkdir(exist_ok=True)
    (tests / f"test_agent_{name.lower()}.py").write_text(TEST_CODE.format(name=name), encoding="utf-8")

    return str(agents_dir)
